* My Emacs Configuration
** Basic Settings
This section contains basic settings to customize the initial behavior and appearance of Emacs.

#+BEGIN_SRC emacs-lisp
;; Disable the startup message
(setq inhibit-startup-message t)

;; Disable the toolbar
(tool-bar-mode -1)
#+END_SRC

** Project Configuration
This section contains configuration variables for the project. These variables set author details, HTML formatting options, and file types to include.

#+BEGIN_SRC emacs-lisp
(require 'ox-publish)

;; Author information
(setq author "d)zharii")

;; Timestamp format for published documents
(setq custom-timestamp-format "%Y-%m-%d")

;; Default HTML to include at the top if #+options: html-preamble:t
(setq custom-html-preamble-format
      '(("en" "Published %d")))

;; Default HTML to include at the footer if #+options: html-postamble:t
;(setq custom-html-postamble-format
;      '(("en" "&copy; %a. Contact me at &lt;%e&gt;")))
;(setq custom-html-postamble-format
;      '(("en" "Created by %a.")))


;; Default HTML to include at the footer if #+options: html-postamble:t
(setq custom-html-postamble-format
      '(("en" "&copy; %a. <a href=\"/sitemap.html\">sitemap</a>")))

;; Custom HTML to include inside <head>
(setq custom-html-head "\
<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">
<link rel=\"stylesheet\" href=\"/static/t.css\"/>")

;; Custom HTML for navigation bar (applies when :html-link-home is non-nil)
(setq custom-html-nav "\
<nav><a href=\"/\" tabindex=\"0\">&larrhk; Back to Index</a></nav>")

;; List of extensions considered static files
(setq static-extensions "js\\|css\\|svg\\|csv\\|png\\|jpg\\|jpeg\\|gif")

;; Additional static files to include explicitly
(setq static-include '(".htaccess"))
#+END_SRC

** Publishing Configuration
This section contains the publishing configuration, defining how and where the files will be published. It includes functions for sitemap generation and project-specific settings.

#+BEGIN_SRC emacs-lisp
;; Function to style the sitemap
(defun sitemap-function (title list)
  "Customize the appearance of the sitemap."
  (org-list-to-org list))

;; Function to format each sitemap entry
(defun sitemap-format-entry (entry style project)
  "Format each entry in the sitemap."
  (cond ((not (directory-name-p entry))
         (format "[[file:%s][%s]]" entry (org-publish-find-title entry project)))
        ((eq style 'tree)
         (file-name-nondirectory (directory-file-name entry)))
        (t
         entry)))

;; Directory for published files
(setq target-dir "docs/")

;; Define publishing projects
(setq org-publish-project-alist
      `(("static"
         :recursive t
         :base-directory "src/"
         :base-extension ,static-extensions
         :include ,static-include
         :publishing-directory ,target-dir
         :publishing-function org-publish-attachment)
        ("pages"
         :recursive t
         :base-directory "src/"
         :base-extension "org"
         :exclude "index.org"
         :publishing-directory ,target-dir
         :publishing-function org-html-publish-to-html
         :with-toc t
         :section-numbers nil
         :author ,author
         :auto-sitemap t
         :sitemap-title "Index"
         :sitemap-function sitemap-function
         :sitemap-format-entry sitemap-format-entry
         :sitemap-sort-files chronologically
         :html-doctype "html5"
         :html-html5-fancy t
         :html-head-include-scripts nil
         :html-head-include-default-style nil
         :html-metadata-timestamp-format ,custom-timestamp-format
         :html-head ,custom-html-head
         :html-home/up-format ,custom-html-nav
         :html-link-home "/"
         :html-preamble t,
         :html-postamble t,
         :html-preamble-format ,custom-html-preamble-format
         :html-postamble-format ,custom-html-postamble-format)
        ("index"
         :recursive nil
         :base-directory "src/"
         :base-extension ""
         :include ("index.org")
         :publishing-directory ,target-dir
         :publishing-function org-html-publish-to-html
         :with-toc t
         :section-numbers nil
         :author ,author
         :html-doctype "html5"
         :html-html5-fancy t
         :html-head-include-scripts nil
         :html-head-include-default-style nil
         :html-metadata-timestamp-format ,custom-timestamp-format
         :html-head ,custom-html-head
         :html-postamble t
         :html-postamble-format ,custom-html-postamble-format)
        ("all"
         :components ("static" "pages" "index"))))

(defun doccy-publish ()
  "Publish the doccy project and display the *Messages* buffer."
  (interactive)
  (org-publish-all t)
  (display-buffer "*Messages*"))

#+END_SRC

** Org mode enhancements
This section contains configurations to enhance Org mode functionality, including handling image pasting and storage.

#+BEGIN_SRC emacs-lisp
(use-package org-download
  :ensure t
  :config
  (setq org-download-method 'directory)
  (setq org-download-image-dir
        (if (buffer-file-name)
            (let ((dir (concat (file-name-sans-extension (buffer-file-name)) ".assets")))
              (unless (file-exists-p dir)
                (make-directory dir t))
              dir)
          (let ((default-dir "~/org-download-assets/"))
            (unless (file-exists-p default-dir)
              (make-directory default-dir t))
            default-dir)))
  (setq org-download-image-org-width 1024)
  (setq org-download-link-format "[[file:%s]]\n"
        org-download-abbreviate-filename-function #'file-relative-name)
  (setq org-download-link-format-function #'org-download-link-format-function-default))
#+END_SRC

*** Explanation
This setup includes the installation and configuration of the `org-download` package, which facilitates the pasting of images from the clipboard directly into Org mode documents. The package is set up to save images in a directory named after the current Org file, with `-img` appended. The images are linked in the document with a specified width for consistent display. The links to the images use relative paths, ensuring portability across different environments.

For more information on this setup, including further customizations and troubleshooting, refer to the discussion on Emacs Stack Exchange:
[[https://emacs.stackexchange.com/questions/71100/pasting-images-from-clipboard-into-orgmode][Pasting images from clipboard into Org mode]].
