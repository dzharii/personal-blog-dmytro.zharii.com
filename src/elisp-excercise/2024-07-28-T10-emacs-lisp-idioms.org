#+title: T10-emacs-lisp-idioms
#+subtitle: docs
#+date: <2024-07-28>
#+language: en

* Summary
I will take time for self-reflection and listen to my inner voice.

* Ref
- [[https://programming-idioms.org/coverage][2024-07-29 programming-idioms.org]]
- [[https://www.gnu.org/software/emacs/manual/html_node/elisp/][2024-07-29 Top (GNU Emacs Lisp Reference Manual)]]

* Idioms


#+begin_src emacs-lisp :results output

#+end_src

** #001 Print Hello World
#+begin_src emacs-lisp :results output
(print "Hello, World!")
#+end_src

#+begin_example
"Hello, World!"
#+end_example

** #002 Print hello 10 times

- `princ`: Outputs a string or character without additional formatting.
- `message`: Prints a message to the minibuffer.
- `insert`: Inserts text into the current buffer.
- `print`: Outputs a Lisp object with additional formatting and a newline.
- `prin1`: Outputs a Lisp object without additional formatting.

#+begin_src emacs-lisp :results output
(dotimes (i 10)
  (princ "Hello\n"))
#+end_src

#+begin_example
Hello
Hello
Hello
Hello
Hello
Hello
Hello
Hello
Hello
Hello
#+end_example

** #003 Create a procedure
#+begin_src emacs-lisp :results output
(defun show (message)
  "Display a message in the echo area."
  (message "Hello: %s" message))

(show "again!")
#+end_src

#+RESULTS:

** #004 Create a Function
Functions in Emacs Lisp are defined using `defun`. The function `square` here takes a parameter `x` and returns its square by multiplying `x` by itself. Emacs Lisp automatically returns the value of the last evaluated expression. Functions are used for modularity and reuse of code. The provided function is a common example of mathematical operations often implemented in scripts.

#+begin_src emacs-lisp :results output
(defun square (x)
  "Return the square of a number."
  (* x x))

(setq a 16)
(print (format "Square of %d is %d" a (square a)))
#+end_src

#+begin_example
"Square of 16 is 256"
#+end_example

** #005 Create a 2D Point data structure
In Emacs Lisp, a 2D point structure can be represented using various methods. One common approach is to use a list or vector to store the x and y coordinates. This example shows a simple implementation using a list and how to create a point and access its coordinates.

#+begin_src emacs-lisp :results output
(defun make-point (x y)
  "Create a point with coordinates x and y."
  (list x y))

(defun point-x (point)
  "Get the x coordinate of POINT."
  (car point))

(defun point-y (point)
  "Get the y coordinate of POINT."
  (cadr point))

(let ((p (make-point 3.0 4.0)))
  (print (format "Point: (%f, %f)" (point-x p) (point-y p))))
#+end_src

#+begin_example
"Point: (3.000000, 4.000000)"
#+end_example

** #006 Iterate Over List Values
In Emacs Lisp, iterating over list values can be achieved using several methods, such as `dolist`, `mapcar`, and `while` loops. This example demonstrates how to use `dolist` to iterate over a list and print each value.

#+begin_src emacs-lisp :results output
(setq items '(1 2 3 4 5))

(dolist (x items)
  (princ (format "Item: %d\n" x)))
#+end_src

#+begin_example
Item: 1
Item: 2
Item: 3
Item: 4
Item: 5
#+end_example

Other methods include `mapcar`, which applies a function to each element of a list and returns a new list with the results. For side effects only, use `mapc` instead. The `while` loop provides a more manual approach, giving full control over iteration conditions and index management.
