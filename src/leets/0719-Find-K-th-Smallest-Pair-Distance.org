#+title: 0719. Find K-th Smallest Pair Distance
#+subtitle: leetcode
#+date: <2024-08-14>
#+language: en

* Problem
Given an integer array =nums= and an integer =k=, return the k-th smallest distance among all the pairs in the array. The distance between a pair (i, j) is defined as =|nums[i] - nums[j]|=. The problem in simpler terms is to find the k-th smallest absolute difference in any two elements in the array =nums=.

* Solution Description
To implement the solution, we need to:
1. **Sort the array**: Sorting will help us to easily calculate distances and use binary search effectively.
2. **Use Binary Search on distance**: The smallest distance is 0 (if there are duplicate elements), and the largest distance is =nums[nums.length-1] - nums[0]=. Use binary search to find the k-th smallest distance.
3. **Count pairs with a distance â¤ mid**: For each midpoint of the search, count how many pairs have a distance less than or equal to the midpoint. Adjust the binary search range based on whether this count is greater than, less than, or equal to k.

This approach uses the binary search method, which ensures an optimal time complexity of O(n log n + n log(max-min)) where n is the length of the input array.

* Example
Consider an array [1, 3, 1] and k = 1. The sorted array is [1, 1, 3]. Possible pairs (distances) are:
- (1,1) -> distance = 0
- (1,3) -> distance = 2
- (1,3) -> distance = 2
Therefore, the 1st smallest distance is 0.

* References
For this problem, we are using binary search methods over possible distances, combined with pair counting.

* Solution
#+begin_src js :tangle "leetcode_719_find_kth_smallest_pair_distance.js"
// Helper functions to add logs and tables
const log = typeof NestedInteger !== 'undefined' ? () => {} : console.log;
const table = typeof NestedInteger!== 'undefined' ? () => {} : console.table;

/**
 ,* Main function to find the k-th smallest pair distance
 ,* @param {number[]} nums - Array of integers
 ,* @param {number} k - The k-th position
 ,* @returns {number} The k-th smallest pair distance
 ,*/
function findKthSmallestPairDistance(nums, k) {
    // return dummy result for now

    return -1;
}

/**
 ,* Test cases to validate the solution
 ,*/
const testCases = [
    { nums: [1, 3, 1], k: 1, expected: 0 },
    { nums: [1, 1, 1], k: 2, expected: 0 },
    { nums: [1, 6, 1], k: 3, expected: 5 },
    { nums: [1, 6, 1, 2], k: 4, expected: 5 },
    { nums: [1, 3, 5], k: 3, expected: 4 },
];

testCases.forEach((test, index) => {
    const result = findKthSmallestPairDistance(test.nums, test.k);
    log(`Test Case ${index + 1}: ${result === test.expected ? 'Passed' : 'Failed'} (Expected: ${test.expected}, Got: ${result})`);
});
#+end_src
