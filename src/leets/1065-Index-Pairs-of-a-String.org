#+title: 1065. Index Pairs of a String
#+subtitle: leetcode
#+date: <2024-12-29>
#+language: en

* Problem
You are given a string =text= and an array of strings =words=. Your task is to find all the index pairs =[i, j]= such that the substring =text[i...j]= is present in =words=. Here, =i= and =j= are inclusive indices representing the start and end positions of the substring in =text=.

The result should be a list of index pairs =[i, j]= that is sorted by the first index =i=, and for each =i=, by =j=.

* Solution Description
To implement a solution for finding all index pairs of substrings in =text= from =words=, we can use the following approach:

1. Iterate over the list of =words= and find all starting indices of each word in the =text=.
2. For each occurrence of a word, calculate the corresponding end index based on the word's length.
3. Gather all index pairs and store them in a list.
4. Once all matches are found, sort the list of index pairs first by the starting index =i=, and then by the ending index =j= for ties.

This approach ensures that we check all possible substrings and match them efficiently. By iterating over all words and using the =String.indexOf= method repeatedly with different starting positions, we can find all occurrences in linear time relative to the length of =text= for each word.

- Time Complexity: O(w * n), where =w= is the number of words and =n= is the length of =text=. This accounts for searching each word in the text individually.
- Space Complexity: O(k), where =k= is the number of index pairs found.

The approach used in this solution is a **brute-force substring matching** technique. By iterating over each word and searching for its occurrences in the `text`, we systematically identify all possible index pairs. This method is straightforward and easy to implement, but it may not be the most efficient for large inputs.

** Other Approaches

*** Trie-based Search:
   Building a trie (prefix tree) of all the =words= allows for efficient searching of multiple words simultaneously within the =text. This reduces the number of redundant comparisons and can significantly improve performance, especially when dealing with a large dictionary of words.

*** Aho-Corasick Algorithm:
   This is an advanced string matching algorithm that constructs a finite state machine to efficiently find all occurrences of a set of =words= in the =text=. It combines the construction of a trie with additional links to handle transitions, enabling simultaneous search for multiple patterns in linear time relative to the length of the =text=.

*** Rolling Hash (Rabin-Karp):
   The Rabin-Karp algorithm uses hashing to find any one of a set of pattern strings in the =text=. By computing a hash for each word and then rolling a hash over the =text=, it can quickly identify potential matches and verify them, offering a balance between simplicity and efficiency.

Each of these approaches has its own trade-offs in terms of implementation complexity and performance, and the choice of which to use can depend on the specific requirements and constraints of the problem at hand.

* Example
Suppose =text = "thestoryofleetcode"= and =words = ["story", "leet", "code"]=.
- The word "story" starts at index 3 and ends at index 7.
- The word "leet" starts at index 10 and ends at index 13.
- The word "code" starts at index 14 and ends at index 17.
The expected result is the list of pairs: =[[3, 7], [10, 13], [14, 17]]=.

* Solution

#+begin_src js :tangle "leetcode_1065_index_pairs_of_a_string.js"
/**
 * @param {string} text - The main text string to search within.
 * @param {string[]} words - The list of words to find in the text.
 * @returns {number[][]} List of index pairs [i, j] where each word starts and ends.
 */
function findIndexPairs(text, words) {
    const log = typeof NestedInteger !== 'undefined' ? () => {} : console.log;
    const table = typeof NestedInteger !== 'undefined' ? () => {} : console.table;

    // Dummy return to allow testing framework setup
    return [];
}

// Test cases
const testCases = [
    {
        text: "thestoryofleetcode",
        words: ["story", "leet", "code"],
        expected: [[3, 7], [10, 13], [14, 17]]
    },
    {
        text: "abc",
        words: ["a", "b", "c"],
        expected: [[0, 0], [1, 1], [2, 2]]
    },
    {
        text: "abcdef",
        words: ["ab", "bc", "de", "ef"],
        expected: [[0, 1], [1, 2], [3, 4], [4, 5]]
    },
    {
        text: "",
        words: ["empty"],
        expected: []
    },
    {
        text: "singlematch",
        words: ["single", "match", "gle"],
        expected: [[0, 5], [6, 10], [3, 5]]
    },
    {
        text: "ababa",
        words: ["aba", "ab"],
        expected: [[0, 1], [0, 2], [2, 3], [2, 4]]
    },
    {
        text: "aaa",
        words: ["a", "aa", "aaa"],
        expected: [[0, 0], [0, 1], [0, 2], [1, 1], [1, 2], [2, 2]]
    },
    {
        text: "hello",
        words: ["world", "hi"],
        expected: []
    },
    {
        text: "abcabcabc",
        words: ["abc", "bc", "c"],
        expected: [[0, 2], [1, 2], [2, 2], [3, 5], [4, 5], [5, 5], [6, 8], [7, 8], [8, 8]]
    }
];

testCases.forEach((test, index) => {
    const result = findIndexPairs(test.text, test.words);
    const sortedResult = result.sort((a, b) => a[0] - b[0] || a[1] - b[1]); // Sort results for comparison
    const isPassed = JSON.stringify(sortedResult) === JSON.stringify(test.expected);
    console.log(`Test Case ${index + 1}: ${isPassed ? 'Passed' : 'Failed'} (Expected: ${JSON.stringify(test.expected)}, Got: ${JSON.stringify(sortedResult)})`);
});
#+end_src
