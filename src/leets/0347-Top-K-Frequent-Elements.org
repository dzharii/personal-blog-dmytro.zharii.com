#+title: 0347. Top K Frequent Elements
#+subtitle: leetcode
#+date: <2024-12-28>
#+language: en

* Problem
Given an integer array ~nums~ and an integer ~k~, return the ~k~ most frequent elements.
You may assume that the answer is unique, and you may return the answer in any order.

- For example:
  - Input: ~nums = [1,1,1,2,2,3]~, ~k = 2~
  - Output: ~[1,2]~

** Solution Description
To implement the solution to this problem, we need to follow these steps:

- First, count the frequency of each element in the array; this can be efficiently done using a JavaScript ~Map~ or ~Object~.
- Create an array of numbers frequency entries, which will store numbers of similar frequency together.
- Iterate over the frequency count and populate the frequency array.
- Make use of a heap (priority queue) that enables us to keep track of the top ~k~ elements with greatest frequency efficiently.
- Use this heap to determine the ~k~ most frequent elements, and return them as a result.
- Time Complexity: ~O(N log k)~, where ~N~ is the number of elements in ~nums~. We iterate ~nums~ once to populate the frequency map, then we perform ~k~ operations.
- Space Complexity: ~O(N)~, storing frequency counts and heap of ~k~ elements.

** Example
Consider ~nums = [1,1,1,2,2,3]~ and ~k=2~.
- Count frequencies: ~1: 3~, ~2: 2~, ~3: 1~
- Use the bucket sort principle to arrange based on occurrence frequency.
- Select the top ~k=2~ elements from the most frequent to least in the list: they are ~1~ and ~2~.

** References
- Map data structure: [[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map][MDN Map Documentation]]
- Heap data structure: See [[https://en.wikipedia.org/wiki/Heap_(data_structure)]]

** Solution

My custom tests are failing, but the solution was accepted. I have failed to
implement my own MaxQueue.
So painful ;)

2024-12-30 [Top K Frequent Elements - LeetCode](https://leetcode.com/problems/top-k-frequent-elements/submissions/1492189838/) { leetcode.com }


#+begin_src js :tangle "347_top_k_frequent_elements.js"

/**
 ,* Main function to find the top k frequent elements.
 ,* @param {number[]} nums - An array of integers.
 ,* @param {number} k - Number of top elements to return.
 ,* @return {number[]} Top k frequent elements.
 ,*/
function topKFrequent(nums, k) {
    const log = typeof NestedInteger !== 'undefined' ? () => {} : console.log;
    const table = typeof NestedInteger !== 'undefined' ? () => {} : console.table;

    log(`Input nums: ${nums}, k: ${k}`);

    // build num frequency histogram
    const freq = {};

    for (const el of nums) {
        freq[el] = el in freq ? freq[el] + 1 : 1;
    }

    log('frequency map:')
    table(freq);

    // push to the heap

    const freqValueIndex = 1;
    const freqKeyIndex = 0;


    const unsorted = [];

    for (const freqKey of Object.keys(freq)) {
        const item = [Number(freqKey), freq[freqKey]];
        unsorted.push(item);
    }

    log(`unsorted = `);
    table(unsorted);

    const sorted = unsorted.sort((pairA, pairB) => pairB[freqValueIndex] - pairA[freqValueIndex]);

    log(`sorted = `);
    table(sorted);

    const result = [];

    for (let i = 0; i < k; i++) {
        const item = sorted.shift();
        if (item) {
            result.push(item[freqKeyIndex]);
        } else {
            break;
        }
    }

    log(`result = ${result}`);

    return result;
}

// Test cases to verify the solution
const testCases = [
    { nums: [6,0,1,4,9,7,-3,1,-4,-8,4,-7,-3,3,2,-3,9,5,-4,0], k: 2, expected: [-3,0,1,4,9,-4] },
    { nums: [1,1,1,2,2,3], k: 2, expected: [1, 2] },
    { nums: [1], k: 1, expected: [1] },
    { nums: [1,2,3,1,2,4,4,4,4], k: 1, expected: [4] },
    { nums: [1,2,3,4,4,5,6,7,8,9,9,9,9], k: 2, expected: [9, 4] },
    { nums: [4,5,6,7,7,7,8,8,9,9,9,9], k: 3, expected: [9, 7, 8] }
];

testCases.forEach((test, index) => {
    console.log(`\nTest Case ${index + 1}: STARTED`);
    const result = topKFrequent(test.nums, test.k);
    console.log(`Test Case ${index + 1}: ${result.sort().toString() === test.expected.sort().toString() ? 'Passed' : 'Failed'} (Expected: ${test.expected}, Got: ${result})`);
});
#+end_src

#+RESULTS:
#+begin_example

Test Case 1: STARTED
Input nums: 6,0,1,4,9,7,-3,1,-4,-8,4,-7,-3,3,2,-3,9,5,-4,0, k: 2
frequency map:
┌─────────┬────────┐
│ (index) │ Values │
├─────────┼────────┤
│ 0       │ 2      │
│ 1       │ 2      │
│ 2       │ 1      │
│ 3       │ 1      │
│ 4       │ 2      │
│ 5       │ 1      │
│ 6       │ 1      │
│ 7       │ 1      │
│ 9       │ 2      │
│ -3      │ 3      │
│ -4      │ 2      │
│ -8      │ 1      │
│ -7      │ 1      │
└─────────┴────────┘
unsorted =
┌─────────┬────┬───┐
│ (index) │ 0  │ 1 │
├─────────┼────┼───┤
│ 0       │ 0  │ 2 │
│ 1       │ 1  │ 2 │
│ 2       │ 2  │ 1 │
│ 3       │ 3  │ 1 │
│ 4       │ 4  │ 2 │
│ 5       │ 5  │ 1 │
│ 6       │ 6  │ 1 │
│ 7       │ 7  │ 1 │
│ 8       │ 9  │ 2 │
│ 9       │ -3 │ 3 │
│ 10      │ -4 │ 2 │
│ 11      │ -8 │ 1 │
│ 12      │ -7 │ 1 │
└─────────┴────┴───┘
sorted =
┌─────────┬────┬───┐
│ (index) │ 0  │ 1 │
├─────────┼────┼───┤
│ 0       │ -3 │ 3 │
│ 1       │ 0  │ 2 │
│ 2       │ 1  │ 2 │
│ 3       │ 4  │ 2 │
│ 4       │ 9  │ 2 │
│ 5       │ -4 │ 2 │
│ 6       │ 2  │ 1 │
│ 7       │ 3  │ 1 │
│ 8       │ 5  │ 1 │
│ 9       │ 6  │ 1 │
│ 10      │ 7  │ 1 │
│ 11      │ -8 │ 1 │
│ 12      │ -7 │ 1 │
└─────────┴────┴───┘
result = -3,0
Test Case 1: Failed (Expected: -3,-4,0,1,4,9, Got: -3,0)

Test Case 2: STARTED
Input nums: 1,1,1,2,2,3, k: 2
frequency map:
┌─────────┬────────┐
│ (index) │ Values │
├─────────┼────────┤
│ 1       │ 3      │
│ 2       │ 2      │
│ 3       │ 1      │
└─────────┴────────┘
unsorted =
┌─────────┬───┬───┐
│ (index) │ 0 │ 1 │
├─────────┼───┼───┤
│ 0       │ 1 │ 3 │
│ 1       │ 2 │ 2 │
│ 2       │ 3 │ 1 │
└─────────┴───┴───┘
sorted =
┌─────────┬───┬───┐
│ (index) │ 0 │ 1 │
├─────────┼───┼───┤
│ 0       │ 1 │ 3 │
│ 1       │ 2 │ 2 │
│ 2       │ 3 │ 1 │
└─────────┴───┴───┘
result = 1,2
Test Case 2: Passed (Expected: 1,2, Got: 1,2)

Test Case 3: STARTED
Input nums: 1, k: 1
frequency map:
┌─────────┬────────┐
│ (index) │ Values │
├─────────┼────────┤
│ 1       │ 1      │
└─────────┴────────┘
unsorted =
┌─────────┬───┬───┐
│ (index) │ 0 │ 1 │
├─────────┼───┼───┤
│ 0       │ 1 │ 1 │
└─────────┴───┴───┘
sorted =
┌─────────┬───┬───┐
│ (index) │ 0 │ 1 │
├─────────┼───┼───┤
│ 0       │ 1 │ 1 │
└─────────┴───┴───┘
result = 1
Test Case 3: Passed (Expected: 1, Got: 1)

Test Case 4: STARTED
Input nums: 1,2,3,1,2,4,4,4,4, k: 1
frequency map:
┌─────────┬────────┐
│ (index) │ Values │
├─────────┼────────┤
│ 1       │ 2      │
│ 2       │ 2      │
│ 3       │ 1      │
│ 4       │ 4      │
└─────────┴────────┘
unsorted =
┌─────────┬───┬───┐
│ (index) │ 0 │ 1 │
├─────────┼───┼───┤
│ 0       │ 1 │ 2 │
│ 1       │ 2 │ 2 │
│ 2       │ 3 │ 1 │
│ 3       │ 4 │ 4 │
└─────────┴───┴───┘
sorted =
┌─────────┬───┬───┐
│ (index) │ 0 │ 1 │
├─────────┼───┼───┤
│ 0       │ 4 │ 4 │
│ 1       │ 1 │ 2 │
│ 2       │ 2 │ 2 │
│ 3       │ 3 │ 1 │
└─────────┴───┴───┘
result = 4
Test Case 4: Passed (Expected: 4, Got: 4)

Test Case 5: STARTED
Input nums: 1,2,3,4,4,5,6,7,8,9,9,9,9, k: 2
frequency map:
┌─────────┬────────┐
│ (index) │ Values │
├─────────┼────────┤
│ 1       │ 1      │
│ 2       │ 1      │
│ 3       │ 1      │
│ 4       │ 2      │
│ 5       │ 1      │
│ 6       │ 1      │
│ 7       │ 1      │
│ 8       │ 1      │
│ 9       │ 4      │
└─────────┴────────┘
unsorted =
┌─────────┬───┬───┐
│ (index) │ 0 │ 1 │
├─────────┼───┼───┤
│ 0       │ 1 │ 1 │
│ 1       │ 2 │ 1 │
│ 2       │ 3 │ 1 │
│ 3       │ 4 │ 2 │
│ 4       │ 5 │ 1 │
│ 5       │ 6 │ 1 │
│ 6       │ 7 │ 1 │
│ 7       │ 8 │ 1 │
│ 8       │ 9 │ 4 │
└─────────┴───┴───┘
sorted =
┌─────────┬───┬───┐
│ (index) │ 0 │ 1 │
├─────────┼───┼───┤
│ 0       │ 9 │ 4 │
│ 1       │ 4 │ 2 │
│ 2       │ 1 │ 1 │
│ 3       │ 2 │ 1 │
│ 4       │ 3 │ 1 │
│ 5       │ 5 │ 1 │
│ 6       │ 6 │ 1 │
│ 7       │ 7 │ 1 │
│ 8       │ 8 │ 1 │
└─────────┴───┴───┘
result = 9,4
Test Case 5: Passed (Expected: 4,9, Got: 4,9)

Test Case 6: STARTED
Input nums: 4,5,6,7,7,7,8,8,9,9,9,9, k: 3
frequency map:
┌─────────┬────────┐
│ (index) │ Values │
├─────────┼────────┤
│ 4       │ 1      │
│ 5       │ 1      │
│ 6       │ 1      │
│ 7       │ 3      │
│ 8       │ 2      │
│ 9       │ 4      │
└─────────┴────────┘
unsorted =
┌─────────┬───┬───┐
│ (index) │ 0 │ 1 │
├─────────┼───┼───┤
│ 0       │ 4 │ 1 │
│ 1       │ 5 │ 1 │
│ 2       │ 6 │ 1 │
│ 3       │ 7 │ 3 │
│ 4       │ 8 │ 2 │
│ 5       │ 9 │ 4 │
└─────────┴───┴───┘
sorted =
┌─────────┬───┬───┐
│ (index) │ 0 │ 1 │
├─────────┼───┼───┤
│ 0       │ 9 │ 4 │
│ 1       │ 7 │ 3 │
│ 2       │ 8 │ 2 │
│ 3       │ 4 │ 1 │
│ 4       │ 5 │ 1 │
│ 5       │ 6 │ 1 │
└─────────┴───┴───┘
result = 9,7,8
Test Case 6: Passed (Expected: 7,8,9, Got: 7,8,9)
undefined
#+end_example
