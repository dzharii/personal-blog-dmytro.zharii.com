#+title: 0592. Fraction Addition and Subtraction
#+subtitle: leetcode
#+date: <2024-08-22>
#+language: en

* Problem
You are given a string ~expression~ that represents a mathematical expression of fractions. The fractions are either separated by a plus sign (+) or a minus sign (-), and represent either positive or negative fractions. The task is to evaluate the expression and return the result as a string in the form of a reduced fraction.

Examples:
- expression = "-1/2+1/2+1/3" returns "1/3"
- expression = "1/3-1/2" returns "-1/6"
- expression = "-1/2+1/2+1/3-1/3" returns "0/1"

**Constraints:**
- The input string only contains '0-9', '/', '-', '+'.
- The sign of every fraction is determined by the operators before it.
- The result should be a reduced fraction in the form where the numerator and denominator have no common factors greater than 1.

* Solution Description
To implement a solution for fraction addition and subtraction, we need to:
1. Parse the string to extract the individual fractions along with their signs.
2. For each fraction, convert it to a common denominator to make the addition/subtraction straightforward.
3. Combine the fractions taking into account their signs.
4. Reduce the result fraction by finding the greatest common divisor (GCD) of the numerator and denominator.
5. Return the result as a string in the form ~numerator/denominator~.

* Example
Consider the input string ~"-1/2+1/2+1/3"~:
1. Parse the string to get fractions: -1/2, 1/2, 1/3.
2. Convert each fraction to a common denominator:
   - Common denominator for this example would be 6.
   - Converting fractions: -1/2 = -3/6, 1/2 = 3/6, 1/3 = 2/6.
3. Perform the addition:
   -3/6 + 3/6 + 2/6 = 2/6.
4. Reduce 2/6 by GCD of 2 and 6 which is 2:
   - Result: 2/6 = 1/3.
5. Return the result: "1/3".

* References
This problem requires understanding of the following:
- Parsing strings in JavaScript.
- Finding the least common multiple (LCM) and greatest common divisor (GCD).
- Basic fraction addition and reduction.

* Solution
Let's define a function to solve this problem and a series of test cases.

#+begin_src js :tangle "leetcode_592_fraction_addition_subtraction.js"

/**
 ,* Main function to solve the problem of fraction addition and subtraction.
 ,* @param {string} expression - The input string representing the expression.
 ,* @returns {string} The result as a reduced fraction.
 ,*/
function fractionAddition(expression) {
    // Log helpers
    const log = typeof NestedInteger !== 'undefined' ? () => {} : console.log;
    const table = typeof NestedInteger !== 'undefined' ? () => {} : console.table;

    /**
     ,* This function calculates the greatest common divisor of two numbers
     ,* @param {number} a
     ,* @param {number} b
     ,* @returns {number} greatest common divisor of a and b
     ,*/
    function gcd(a, b) {
        log(`Calculating GCD of ${a} and ${b}`);
        return b === 0 ? a : gcd(b, a % b);
    }

    /**
     ,* This function computes the least common multiple of two numbers
     ,* @param {number} a
     ,* @param {number} b
     ,* @returns {number} least common multiple of a and b
     ,*/
    function lcm(a, b) {
        return (a * b) / gcd(a, b)
    }


    // Dummy return value, to be replaced by actual implementation.
    return 'dummy_result';
}

// Test cases
const testCases = [
    { expression: "-1/2+1/2+1/3", expected: "1/3" },
    { expression: "1/3-1/2", expected: "-1/6" },
    { expression: "-1/2+1/2+1/3-1/3", expected: "0/1" },
    { expression: "5/3+1/3", expected: "2/1" },
    { expression: "-3/7+7/10-3/4", expected: "-41/140" },
    // Additional test cases to ensure comprehensive coverage.
];

testCases.forEach((test, index) => {
    const result = fractionAddition(test.expression);
    console.log(`Test Case ${index + 1}: ${result === test.expected ? 'Passed' : 'Failed'} (Expected: ${test.expected}, Got: ${result})`);
});
#+end_src

#+RESULTS:
: Test Case 1: Failed (Expected: 1/3, Got: dummy_result)
: Test Case 2: Failed (Expected: -1/6, Got: dummy_result)
: Test Case 3: Failed (Expected: 0/1, Got: dummy_result)
: Test Case 4: Failed (Expected: 2/1, Got: dummy_result)
: Test Case 5: Failed (Expected: -41/140, Got: dummy_result)
: undefined

Remember to implement the actual logic inside the ~fractionAddition~ function.
