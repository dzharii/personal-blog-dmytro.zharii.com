* 104. Maximum Depth of Binary Tree
:PROPERTIES:
:Created: 2024-07-07
:END:

** Problem:
Given the root of a binary tree, return its maximum depth. The maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.

** Solution Description:
To implement the solution for finding the maximum depth of a binary tree, we need to use a depth-first search (DFS) approach. Every time we traverse down a node, we increase our depth count. We need to check both left and right subtrees to find the maximum depth from the current node.

Here's a step-by-step plan:
1. If the current node is null, that contributes 0 to the depth.
2. Otherwise, compute the depth of the left and right subtrees.
3. The depth of the current node is 1 plus the maximum of the depths of the left and right subtrees.
4. Return this computed depth.

Time Complexity: O(N), where N is the number of nodes in the tree. We have to visit each node once.
Space Complexity: O(H), where H is the height of the tree. This is due to the recursion stack.

** Example:
Consider the binary tree:

```
      3
     / \
    9  20
      /  \
     15   7
```

The maximum depth of this tree is 3.

** Setup:
Here is a skeleton code for implementing the solution. An additional helper function can also be included for testing purposes using examples.

#+begin_src js :tangle "104_maximum_depth_of_binary_tree.js" :exports results

// Helper function to define a TreeNode
/**
 ,* Definition for a binary tree node.
 ,* @param {number} val
 ,* @param {TreeNode} left
 ,* @param {TreeNode} right
 ,*/
function TreeNode(val, left = null, right = null) {
    this.val = val;
    this.left = left;
    this.right = right;
}

/**
 ,* Main function to find the maximum depth of binary tree
 ,* @param {TreeNode} root
 ,* @return {number}
 ,*/
function maxDepth(root) {
    const log = typeof NestedInteger !== 'undefined' ? () => {} : console.log;
    const table = typeof NestedInteger!== 'undefined' ? () => {} : console.table;

    function depth(node) {
        if (node === null) return 0;
        const leftDepth = depth(node.left);
        const rightDepth = depth(node.right);

        return Math.max(leftDepth, rightDepth) + 1;
    }

    return depth(root);
}

// Test cases
const testCases = [
    {
        root: new TreeNode(3,
                new TreeNode(9),
                new TreeNode(20,
                    new TreeNode(15),
                    new TreeNode(7))),
        expected: 3
    },
    {
        root: new TreeNode(1,
                null,
                new TreeNode(2)),
        expected: 2
    },
    {
        root: new TreeNode(1),
        expected: 1
    },
    {
        root: null,
        expected: 0
    },
    {
        root: new TreeNode(0,
                new TreeNode(2,
                    new TreeNode(4,
                        new TreeNode(8)),
                    new TreeNode(5)),
                new TreeNode(3,
                    null,
                    new TreeNode(7,
                        new TreeNode(9)))),
        expected: 4
    }
];

testCases.forEach((test, index) => {
    const result = maxDepth(test.root);
    console.log(`Test Case ${index + 1}: ${result === test.expected ? 'Passed' : 'Failed'} (Expected: ${test.expected}, Got: ${result})`);
});
#+end_src

#+RESULTS:
: Test Case 1: Passed (Expected: 3, Got: 3)
: Test Case 2: Passed (Expected: 2, Got: 2)
: Test Case 3: Passed (Expected: 1, Got: 1)
: Test Case 4: Passed (Expected: 0, Got: 0)
: Test Case 5: Passed (Expected: 4, Got: 4)
: undefined
