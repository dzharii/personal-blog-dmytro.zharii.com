#+title: 0001. Two Sum
#+subtitle: leetcode
#+date: <2024-11-10>
#+language: en

org
* Problem Restatement
The "Two Sum" problem requires finding two distinct indices in an array of integers where the associated numbers sum up to a given target value. Specifically, you need to find indices \(i\) and \(j\) such that \(nums[i] + nums[j] = \text{target}\).

* Solution Description
To solve the "Two Sum" problem efficiently, we need to use a hash map (or table in Lua) to store the numbers as keys and their respective indices as values. This allows quick lookup for the complement of each number (i.e., \( \text{target} - \text{current number} \)). The algorithm can be implemented in one pass through the numbers, achieving a time complexity of \( O(n) \), where \( n \) is the number of elements in the array. The space complexity is also \( O(n) \) due to the space required for the hash map.

  - Start with an empty table to store numbers and their indices.
  - For each number in the array:
    - Compute its complement with respect to the target.
    - If the complement is found in the table, return the stored index and the current index.
    - Otherwise, store the current number with its index in the table.

* Example
Consider the array \([2, 7, 11, 15]\) and target \(9\):
- Initialize an empty table.
- For the first number \(2\), compute complement \(7\). It is not in the table.
- For the second number \(7\), compute complement \(2\). It is in the table, hence indices \([1, 2]\) are the solution.

* Solution Code
This solution uses Lua to implement the described approach, including a simple testing mechanism.

#+begin_src lua :tangle "1_twoSum.lua"
-- Two Sum solution in Lua

function twoSum(nums, target)
    local map = {}
    for i = 1, #nums do
        local complement = target - nums[i]
        if map[complement] then
            return {map[complement], i}
        end
        map[nums[i]] = i
    end
    return nil  -- In case no solution is found, handle accordingly.
end

-- Helper function to compare arrays
function assertEqualArrays(a, b)
    if #a ~= #b then
        error("Arrays are not equal in length")
    end
    for i = 1, #a do
        if a[i] ~= b[i] then
            error("Arrays differ at position "..i..": "..a[i].." ~= "..b[i])
        end
    end
end

-- Test cases as an array of objects
local tests = {
    {
        title = "Test 1: Simple case",
        test = function()
            local nums = {2, 7, 11, 15}
            local target = 9
            local expected = {1, 2}
            local result = twoSum(nums, target)
            assertEqualArrays(result, expected)
        end
    },
    {
        title = "Test 2: Multiple solutions",
        test = function()
            local nums = {3, 2, 4}
            local target = 6
            local expected = {2, 3}
            local result = twoSum(nums, target)
            assertEqualArrays(result, expected)
        end
    },
    {
        title = "Test 3: Same number twice",
        test = function()
            local nums = {3, 3}
            local target = 6
            local expected = {1, 2}
            local result = twoSum(nums, target)
            assertEqualArrays(result, expected)
        end
    },
    {
        title = "Test 4: Negative numbers",
        test = function()
            local nums = {-1, -2, -3, -4, -5}
            local target = -8
            local expected = {3, 5}
            local result = twoSum(nums, target)
            assertEqualArrays(result, expected)
        end
    },
    {
        title = "Test 5: No solution",
        test = function()
            local nums = {1, 2, 3}
            local target = 7
            local result = twoSum(nums, target)
            if result then
                error("Expected nil, got a result")
            end
        end
    }
}

-- Test runner function
function runTests(tests)
    local passed = 0
    local failed = 0
    for _, testCase in ipairs(tests) do
        io.write(testCase.title .. " ... ")
        local status, err = pcall(testCase.test)
        if status then
            print("Passed")
            passed = passed + 1
        else
            print("Failed: " .. err)
            failed = failed + 1
        end
    end
    print("\nSummary:")
    print("Passed: "..passed)
    print("Failed: "..failed)
end

-- Execute tests
runTests(tests)
#+end_src

* References
This problem uses a hash map to solve the problem efficiently: for further reading on hash maps, see [Hash Map - Wikipedia](https://en.wikipedia.org/wiki/Hash_table).
