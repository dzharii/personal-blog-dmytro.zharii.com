#+title: 0001. Two Sum
#+subtitle: leetcode
#+date: <2024-11-10>
#+language: en

org
* Problem Restatement
  Given an array of integers `nums` and an integer `target`, return indices of the two numbers such that they add up to `target`. Each input has exactly one solution, and you cannot use the same element twice. You can return the answer in any order.

* Solution Description
  To implement a solution for the Two Sum problem, we can use a hash table (dictionary) to store the numbers and their corresponding indices as we iterate through the list. This allows us to check in constant time whether the complementary number needed to reach the target has already been visited. If a complement is found, we retrieve the stored index and return both indices. This approach has a time complexity of O(n), where n is the number of elements in the list, and a space complexity of O(n) as well due to storing the elements in the hash table.

* Example
  Consider the input list `nums = [2, 7, 11, 15]` and `target = 9`.
  - Start with an empty map.
  - For the first element (2), calculate `complement = 9 - 2 = 7`. Since 7 is not in the map, add 2 to the map with its index.
  - For the second element (7), calculate `complement = 9 - 7 = 2`. Now, 2 is in the map, so return the index of 2 and the current index, i.e., [1, 2].

* References
  - For more details on hash tables: https://en.wikipedia.org/wiki/Hash_table

* Solution Code
  #+begin_src lua :tangle "1_twoSum.lua"
  -- Two Sum solution in Lua

  -- Function documentation 
  -- @param nums The list of numbers.
  -- @param target The target sum.
  -- @return The indices of the two numbers that add up to the target.

  function twoSum(nums, target)
      local map = {}
      for i = 1, #nums do
          local complement = target - nums[i]
          if map[complement] then
              return {map[complement], i}
          end
          map[nums[i]] = i
      end
  end

  -- Testing framework

  function assertEqualArrays(a, b)
      if #a ~= #b then
          error("Arrays are not equal in length")
      end
      for i = 1, #a do
          if a[i] ~= b[i] then
              error("Arrays differ at position "..i..": "..a[i].." ~= "..b[i])
          end
      end
  end

  local tests = {
      {
          title = "Test 1: Simple case",
          test = function()
              local nums = {2, 7, 11, 15}
              local target = 9
              local expected = {1, 2}
              local result = twoSum(nums, target)
              assertEqualArrays(result, expected)
          end
      },
      {
          title = "Test 2: Multiple solutions",
          test = function()
              local nums = {3, 2, 4}
              local target = 6
              local expected = {2, 3}
              local result = twoSum(nums, target)
              assertEqualArrays(result, expected)
          end
      },
      {
          title = "Test 3: Same number twice",
          test = function()
              local nums = {3, 3}
              local target = 6
              local expected = {1, 2}
              local result = twoSum(nums, target)
              assertEqualArrays(result, expected)
          end
      },
      {
          title = "Test 4: Negative numbers",
          test = function()
              local nums = {-1, -2, -3, -4, -5}
              local target = -8
              local expected = {3, 5}
              local result = twoSum(nums, target)
              assertEqualArrays(result, expected)
          end
      },
      {
          title = "Test 5: No solution",
          test = function()
              local nums = {1, 2, 3}
              local target = 7
              local result = twoSum(nums, target)
              if result ~= nil then
                  error("Expected nil, got a result")
              end
          end
      }
  }

  function runTests(tests)
      local passed = 0
      local failed = 0
      for _, testCase in ipairs(tests) do
          io.write(testCase.title .. " ... ")
          local status, err = pcall(testCase.test)
          if status then
              print("Passed")
              passed = passed + 1
          else
              print("Failed: " .. err)
              failed = failed + 1
          end
      end
      print("\nSummary:")
      print("Passed: "..passed)
      print("Failed: "..failed)
  end

  runTests(tests)
  #+end_src
