; Listing generated by Microsoft (R) Optimizing Compiler Version 19.36.32532.0 

	TITLE	D:\my-github\personal-blog-dmytro.zharii.com\articles\2023-06-01-the-value-objects.assets\code-snippets\2023-06-11-the-c-lang-value-object\main.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	___local_stdio_printf_options
PUBLIC	__vfprintf_l
PUBLIC	_printf
PUBLIC	_perform_operation_on_meters
PUBLIC	_main
EXTRN	_exit:PROC
EXTRN	_atof:PROC
EXTRN	___acrt_iob_func:PROC
EXTRN	___stdio_common_vfprintf:PROC
EXTRN	_meters_new:PROC
EXTRN	_operation_from_string:PROC
EXTRN	__fltused:DWORD
_DATA	SEGMENT
COMM	?_OptionsStorage@?1??__local_stdio_printf_options@@9@9:QWORD							; `__local_stdio_printf_options'::`2'::_OptionsStorage
_DATA	ENDS
_DATA	SEGMENT
$SG12217 DB	'performing add operation:', 0aH, 00H
	ORG $+1
$SG12219 DB	'performing sub operation:', 0aH, 00H
	ORG $+1
$SG12221 DB	'performing mul operation:', 0aH, 00H
	ORG $+1
$SG12223 DB	'performing div operation:', 0aH, 00H
	ORG $+1
$SG12225 DB	'Error: operation value is invalid', 0aH, 00H
	ORG $+1
$SG12241 DB	'Error in first meter value: %s', 0aH, 00H
$SG12243 DB	'Error in operation: %s', 0aH, 00H
$SG12245 DB	'Error in second meter value: %s', 0aH, 00H
	ORG $+3
$SG12246 DB	' - Operand 1: %f', 0aH, 00H
	ORG $+2
$SG12247 DB	' - Operand 2: %f', 0aH, 00H
	ORG $+2
$SG12249 DB	'Error in result: %s', 0aH, 00H
	ORG $+3
$SG12250 DB	' - Result: %f', 0aH, 00H
_DATA	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv186 = -24						; size = 4
tv167 = -20						; size = 4
_result$ = -16						; size = 4
_op$ = -12						; size = 4
_m1$ = -8						; size = 4
_m2$ = -4						; size = 4
_argc$ = 8						; size = 4
_argv$ = 12						; size = 4
_main	PROC
; File D:\my-github\personal-blog-dmytro.zharii.com\articles\2023-06-01-the-value-objects.assets\code-snippets\2023-06-11-the-c-lang-value-object\main.c
; Line 33
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
; Line 36
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _argv$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	call	_atof
	add	esp, 4
	fstp	DWORD PTR tv167[ebp]
	fld	DWORD PTR tv167[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	call	_meters_new
	add	esp, 4
	mov	DWORD PTR _m1$[ebp], eax
; Line 37
	mov	eax, DWORD PTR _m1$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN2@main
; Line 38
	mov	ecx, DWORD PTR _m1$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	push	OFFSET $SG12241
	call	_printf
	add	esp, 8
; Line 39
	push	1
	call	_exit
$LN2@main:
; Line 42
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _argv$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	call	_operation_from_string
	add	esp, 4
	mov	DWORD PTR _op$[ebp], eax
; Line 43
	mov	ecx, DWORD PTR _op$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	je	SHORT $LN3@main
; Line 44
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	push	OFFSET $SG12243
	call	_printf
	add	esp, 8
; Line 45
	push	1
	call	_exit
$LN3@main:
; Line 48
	mov	edx, 4
	imul	eax, edx, 3
	mov	ecx, DWORD PTR _argv$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	call	_atof
	add	esp, 4
	fstp	DWORD PTR tv186[ebp]
	fld	DWORD PTR tv186[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	call	_meters_new
	add	esp, 4
	mov	DWORD PTR _m2$[ebp], eax
; Line 49
	mov	eax, DWORD PTR _m2$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN4@main
; Line 50
	mov	ecx, DWORD PTR _m2$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	push	OFFSET $SG12245
	call	_printf
	add	esp, 8
; Line 51
	push	1
	call	_exit
$LN4@main:
; Line 56
	mov	ecx, DWORD PTR _m1$[ebp]
	cvtss2sd xmm0, DWORD PTR [ecx]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET $SG12246
	call	_printf
	add	esp, 12					; 0000000cH
; Line 57
	mov	edx, DWORD PTR _m2$[ebp]
	cvtss2sd xmm0, DWORD PTR [edx]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET $SG12247
	call	_printf
	add	esp, 12					; 0000000cH
; Line 58
	mov	eax, DWORD PTR _op$[ebp]
	push	eax
	mov	ecx, DWORD PTR _m2$[ebp]
	push	ecx
	mov	edx, DWORD PTR _m1$[ebp]
	push	edx
	call	_perform_operation_on_meters
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax
; Line 59
	mov	eax, DWORD PTR _result$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN5@main
; Line 60
	mov	ecx, DWORD PTR _result$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	push	OFFSET $SG12249
	call	_printf
	add	esp, 8
; Line 61
	push	1
	call	_exit
$LN5@main:
; Line 63
	mov	ecx, DWORD PTR _result$[ebp]
	cvtss2sd xmm0, DWORD PTR [ecx]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET $SG12250
	call	_printf
	add	esp, 12					; 0000000cH
; Line 64
	xor	eax, eax
$LN1@main:
; Line 65
	mov	esp, ebp
	pop	ebp
	ret	0
_main	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_div_result$1 = -28					; size = 4
_mul_result$2 = -24					; size = 4
_sub_result$3 = -20					; size = 4
_add_result$4 = -16					; size = 4
_operand2$ = -12					; size = 4
_operand1$ = -8						; size = 4
tv67 = -4						; size = 4
_m1$ = 8						; size = 4
_m2$ = 12						; size = 4
_op$ = 16						; size = 4
_perform_operation_on_meters PROC
; File D:\my-github\personal-blog-dmytro.zharii.com\articles\2023-06-01-the-value-objects.assets\code-snippets\2023-06-11-the-c-lang-value-object\main.c
; Line 6
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
; Line 7
	mov	eax, DWORD PTR _m1$[ebp]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _operand1$[ebp], xmm0
; Line 8
	mov	ecx, DWORD PTR _m2$[ebp]
	movss	xmm0, DWORD PTR [ecx]
	movss	DWORD PTR _operand2$[ebp], xmm0
; Line 10
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR tv67[ebp], eax
	mov	ecx, DWORD PTR tv67[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv67[ebp], ecx
	cmp	DWORD PTR tv67[ebp], 3
	ja	$LN8@perform_op
	mov	edx, DWORD PTR tv67[ebp]
	jmp	DWORD PTR $LN10@perform_op[edx*4]
$LN4@perform_op:
; Line 12
	push	OFFSET $SG12217
	call	_printf
	add	esp, 4
; Line 13
	movss	xmm0, DWORD PTR _operand1$[ebp]
	addss	xmm0, DWORD PTR _operand2$[ebp]
	movss	DWORD PTR _add_result$4[ebp], xmm0
; Line 14
	push	ecx
	movss	xmm0, DWORD PTR _add_result$4[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_meters_new
	add	esp, 4
	jmp	$LN2@perform_op
$LN5@perform_op:
; Line 16
	push	OFFSET $SG12219
	call	_printf
	add	esp, 4
; Line 17
	movss	xmm0, DWORD PTR _operand1$[ebp]
	subss	xmm0, DWORD PTR _operand2$[ebp]
	movss	DWORD PTR _sub_result$3[ebp], xmm0
; Line 18
	push	ecx
	movss	xmm0, DWORD PTR _sub_result$3[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_meters_new
	add	esp, 4
	jmp	SHORT $LN2@perform_op
$LN6@perform_op:
; Line 20
	push	OFFSET $SG12221
	call	_printf
	add	esp, 4
; Line 21
	movss	xmm0, DWORD PTR _operand1$[ebp]
	mulss	xmm0, DWORD PTR _operand2$[ebp]
	movss	DWORD PTR _mul_result$2[ebp], xmm0
; Line 22
	push	ecx
	movss	xmm0, DWORD PTR _mul_result$2[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_meters_new
	add	esp, 4
	jmp	SHORT $LN2@perform_op
$LN7@perform_op:
; Line 24
	push	OFFSET $SG12223
	call	_printf
	add	esp, 4
; Line 25
	movss	xmm0, DWORD PTR _operand1$[ebp]
	divss	xmm0, DWORD PTR _operand2$[ebp]
	movss	DWORD PTR _div_result$1[ebp], xmm0
; Line 26
	push	ecx
	movss	xmm0, DWORD PTR _div_result$1[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_meters_new
	add	esp, 4
	jmp	SHORT $LN2@perform_op
$LN8@perform_op:
; Line 28
	push	OFFSET $SG12225
	call	_printf
	add	esp, 4
; Line 29
	push	1
	call	_exit
$LN2@perform_op:
; Line 31
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN10@perform_op:
	DD	$LN4@perform_op
	DD	$LN5@perform_op
	DD	$LN6@perform_op
	DD	$LN7@perform_op
_perform_operation_on_meters ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT _printf
_TEXT	SEGMENT
__Result$ = -8						; size = 4
__ArgList$ = -4						; size = 4
__Format$ = 8						; size = 4
_printf	PROC						; COMDAT
; File D:\Windows Kits\10\include\10.0.22000.0\ucrt\stdio.h
; Line 956
	push	ebp
	mov	ebp, esp
	sub	esp, 8
; Line 959
	lea	eax, DWORD PTR __Format$[ebp+4]
	mov	DWORD PTR __ArgList$[ebp], eax
; Line 960
	mov	ecx, DWORD PTR __ArgList$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR __Format$[ebp]
	push	edx
	push	1
	call	___acrt_iob_func
	add	esp, 4
	push	eax
	call	__vfprintf_l
	add	esp, 16					; 00000010H
	mov	DWORD PTR __Result$[ebp], eax
; Line 961
	mov	DWORD PTR __ArgList$[ebp], 0
; Line 962
	mov	eax, DWORD PTR __Result$[ebp]
; Line 963
	mov	esp, ebp
	pop	ebp
	ret	0
_printf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT __vfprintf_l
_TEXT	SEGMENT
__Stream$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vfprintf_l PROC					; COMDAT
; File D:\Windows Kits\10\include\10.0.22000.0\ucrt\stdio.h
; Line 644
	push	ebp
	mov	ebp, esp
; Line 645
	mov	eax, DWORD PTR __ArgList$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Locale$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Format$[ebp]
	push	edx
	mov	eax, DWORD PTR __Stream$[ebp]
	push	eax
	call	___local_stdio_printf_options
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	call	___stdio_common_vfprintf
	add	esp, 24					; 00000018H
; Line 646
	pop	ebp
	ret	0
__vfprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT
; File D:\Windows Kits\10\include\10.0.22000.0\ucrt\corecrt_stdio_config.h
; Line 90
	push	ebp
	mov	ebp, esp
; Line 92
	mov	eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@9 ; `__local_stdio_printf_options'::`2'::_OptionsStorage
; Line 93
	pop	ebp
	ret	0
___local_stdio_printf_options ENDP
_TEXT	ENDS
END
